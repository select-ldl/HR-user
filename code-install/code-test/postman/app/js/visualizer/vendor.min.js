!function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,(function(r){return o(e[i][1][r]||r)}),p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}({1:[function(require,module,exports){var ipcRenderer=require("electron").ipcRenderer;function serializeError(err){if(!err)return{};let serializedError={};return Object.keys(err).concat(["name","message","stack"]).forEach((function(key){serializedError[key]=err[key]})),serializedError}module.exports=new class{constructor(){this.logger=console}setLogger(logger){logger&&"function"==typeof logger.log&&"function"==typeof logger.warn&&"function"==typeof logger.error&&(this.logger=logger)}on(channel,listener){ipcRenderer.on(channel,listener)}removeListener(channel,listener){ipcRenderer.removeListener(channel,listener)}$fn(fnName,channel,...args){if("function"==typeof ipcRenderer[fnName])try{return ipcRenderer[fnName](channel,...args)}catch(err){let newArgs;this.logger.error("IPC Visualizer: Bad usage of IPC",{channel:channel,error:serializeError(err)});try{return newArgs=JSON.parse(JSON.stringify(args)),ipcRenderer[fnName](channel,...newArgs)}catch(error){this.logger.error("IPC Visualizer: Bad usage of IPC, cannot stringify circular/BigInt referenced object",{channel:channel,error:serializeError(error)})}}}send(channel,...args){return this.$fn("send",channel,...args)}sendToHost(channel,...args){return this.$fn("sendToHost",channel,...args)}sendSync(channel,...args){return this.logger.warn("Sending synchronous messages over IPC is deprecated!! We recommend you to move your usage to asynchronous messaging over IPC"),this.$fn("sendSync",channel,...args)}invoke(channel,...args){return ipcRenderer.invoke(channel,...args).catch((err=>{if("An object could not be cloned."===err.message){let newArgs;this.logger.error("IPC Visualizer: Bad usage of IPC",{channel:channel,error:serializeError(err)});try{return newArgs=JSON.parse(JSON.stringify(args)),ipcRenderer.invoke(channel,...newArgs)}catch(error){this.logger.error("IPC Visualizer: Bad usage of IPC, cannot stringify circular/BigInt referenced object",{channel:channel,error:serializeError(error)})}}return Promise.reject(err)}))}}},{electron:void 0}],2:[function(require,module,exports){var intervalId,ipcRenderer=require("./ipc"),{contextBridge:contextBridge}=require("electron"),isCommunicationEstablished=!1,pendingMessages={},pendingCallbacks={};function handleMessageFromParent(message){switch(message.type){case"pong":isCommunicationEstablished=!0,Object.keys(pendingMessages).forEach((function(type){var messages=pendingMessages[type];Array.isArray(messages)?messages.forEach((function(message){sendMessageToParent(type,message)})):console.error("Sandbox~clearPendingMessages - pendingMessages should be an array, found "+typeof messages)})),pendingMessages={};break;case"getData":case"getResponse":var messageId=message.data.id,err=message.data.error,value=message.data.value;pendingCallbacks[messageId]&&pendingCallbacks[messageId](err,value),delete pendingCallbacks[messageId];break;default:messageId=message.data.id,err=message.data.error&&new Error(message.data.error);pendingCallbacks[messageId]&&pendingCallbacks[messageId](err),delete pendingCallbacks[messageId]}}function sendMessageToParent(type,message){if(type){if("ping"!==type&&!isCommunicationEstablished)return!pendingMessages[type]&&(pendingMessages[type]=[]),void pendingMessages[type].push(message);var messageObj={type:type,data:message};ipcRenderer.sendToHost("visualizerMessage",messageObj)}}const pm={};["getData","getResponse"].forEach((function(functionName){pm[functionName]=function(callback){if("function"==typeof callback){var dt,message={id:(dt=(new Date).getTime(),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(c){var r=(dt+16*Math.random())%16|0;return dt=Math.floor(dt/16),("x"==c?r:3&r|8).toString(16)})))};pendingCallbacks[message.id]=callback,sendMessageToParent(functionName,message)}}})),contextBridge.exposeInMainWorld("pm",pm);var customConsole={};Object.keys(window.console).forEach((function(key){"function"==typeof window.console[key]&&(customConsole[key]=function(){})})),["log","info","warn","error"].forEach((function(level){customConsole[level]=function(){var message={level:level,args:Array.from(arguments)};sendMessageToParent("console",message)}})),ipcRenderer.setLogger(customConsole),ipcRenderer.on("visualizerMessage",(function(event,message){message&&handleMessageFromParent(message)})),intervalId=setInterval((function(){isCommunicationEstablished?clearInterval(intervalId):sendMessageToParent("ping")}),100)},{"./ipc":1,electron:void 0}]},{},[2]);