<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<!-- Level的级别，由高到低 -->
	<!-- None > Fatal > ERROR > WARN > DEBUG > INFO > ALL-->
	<!-- 解释：如果level是ERROR，则在cs文件里面调用log4net的info()方法，则不会写入到日志文件中-->
	<log4net>
		<logger name="logger">
			<level value="ALL" />
			<appender-ref ref="LogAppender" />
		</logger>
		<!--信息日志附加介质-->
		<!--<appender name="LogAppender" type="log4net.Appender.RollingFileAppender">-->
		<appender name="LogAppender" type="log4net.Appender.RollingFileAppender">
			<param name="File" value="Log\\" />
			<param name="AppendToFile" value="true" />
			<param name="MaxFileSize" value="10240" />
			<param name="MaxSizeRollBackups" value="100" />
			<param name="StaticLogFileName" value="false" />
			<param name="DatePattern" value="yyyyMMdd&quot;.log&quot;" />
			<param name="RollingStyle" value="Date" />
			<!--信息日志布局-->
			<layout type="log4net.Layout.PatternLayout">
				<param name="ConversionPattern" value="%d [Level: %-5p] [Thread: %t] [class：%c] [%x]: %m%n" />
			</layout>

			<!--<filter type="log4net.Filter.StringMatchFilter">-->
			<!--	<stringToMatch value="API Request"/>-->
			<!--</filter>-->
			<!--<filter type="log4net.Filter.StringMatchFilter">-->
			<!--	<stringToMatch value="API Response"/>-->
			<!--</filter>-->
			<!--<filter type="log4net.Filter.DenyAllFilter" />-->
		</appender>
		<!--文本日志附加介质-->
		<appender name="TextAppender" type="log4net.Appender.RollingFileAppender">
			<!--这种配置，是将日志写入到文本文件当中，若是需要将日志已其他形式保存，可以看 https://www.cnblogs.com/kliine/p/10950992.html
			<param name="File" value="Logger/" />//日志存放位置（这里的value值是一个Logger，表示在项目文件夹中创建一个名叫Logger的文件。也可以是value="c:\log.txt"）-->
			<param name="AppendToFile" value="true" />
			<!--是否追加到文件-->
			<param name="RollingStyle" value="Date" />
			<!--变换的形式为日期-->
			<param name="DatePattern" value="&quot;Logs_&quot;yyyyMMdd&quot;.txt&quot;" />
			<!--生成格式；每天生成一个日志-->
			<param name="StaticLogFileName" value="false" />
			<!--日志文件名，是否固定不变-->
			<layout type="log4net.Layout.PatternLayout,log4net">
				<param name="ConversionPattern" value="%d [Level: %-5p] [Thread: %t] [class：%c]: %m%n" />
				<!--这3行表示日志输出的格式，若不喜欢这样的样式，可以查看下面的输出样式，自行修改-->
				<param name="Header" value="&#xA;----------------------header--------------------------&#xA;" />
				<param name="Footer" value="&#xA;----------------------footer--------------------------&#xA;" />
			</layout>
		</appender>
	</log4net>
</configuration>

<!--输出样式：
%m(message):输出的日志消息，如ILog.Debug(…)输出的一条消息
%n(new line):换行
%d(datetime):输出当前语句运行的时刻
%r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数
%t(thread id):当前语句所在的线程ID
%p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等
%c(class):当前日志对象的名称，例如：
%f(file):输出语句所在的文件名。
%l(line)：输出语句所在的行号。
%数字：表示该项的最小长度，如果不够，则用空格填充，如“%-5level”表示level的最小宽度是5个字符，如果实际长度不够5个字符则以空格填充。
-->